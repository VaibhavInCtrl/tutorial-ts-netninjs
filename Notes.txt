- compile ts file using, tsc <file_name>.ts (two options, give js file name after .ts or no name, then same file name in js would be created)
- variable type is defined after decleration first time (infers its type)
- only number type, covers all (int, float)
- Arrow function format 1
        const FUNCNAME = (VARIABLES) => {
            CODE
            return VALUE
        }
- Define types using ":", like age: number
- Arrays are also type specific, to have mixed types declare it at while writing the array in it
- Objects also work in the same way that the key value pairs have the same type (value), overwriting only allows when the exact structure and type of the original one and cant also add newer ones. VERY STRICT
- to get all values in loop, use array.forEach(FUNCTION). To push newer values use array.push()
- Initialize types (explicit types), do using 
        let character: string;
- To push to an empty array, initialize it by giving it an empty array value like
        let newArray: string[] = []; ||| let newArray: string[]
        1st one would be able to push, 2nd wont
- Union types: 
        let mixed: (string|number)[];
- Multiple acceptable types: 
        let uid: string|number;
- Object type also allows for arrays as a entry, as array is also a type of Object.
        let userInfo: object;
        userInfo = {
            name: "vaibhav",
            age: 21
        }

        let userInfo2 = {
            name: string,
            age: number,
            class: string
        }
        // check the : here after userInfo2
        userInfo2: {
            name: "vaibhav",
            age: 21,
            class: "pass out
        }

- We have :any type which can give object, string, boolean, number. works like other types in defining
- Public and src folders. Public have the final codes (js file), src has the source code(ts file). To manage ts in this format, we do 
        tsc --init
        change the rootDir to correct dir like ./src and outDir to ./Public
        then run tsc -w for any new file and everything else
- Now if new file added in the base dir, will also be compiled to remove this add 
        "include": ["src"]
        as a new key in the mail object in tsconfig.json
- To define a const or let variable to be a function use 
        const newFun: Function;
        capital F
- To have optional parameters, use ? in front of them
        const add = (a: number, b: number, c?: number | string) => {
                console.log(a+b);
                console.log(c)
        }
        other method:
        const add = (a: number, b: number, c: number | string = 10) => {
                console.log(a+b);
                console.log(c)
        }
        c in above has a default value of 10, its still optional but now no ? required
- To define return type of a function use like this:
        const minus = (a: number, b: number): number => {
                return a - b
        }
        let result = minus(10, 7)
        can also use type :void
- To define own types use:
        type StringorNum = string | number;
        type objwithName = {name: string, uid: StringorNum};
        to use this in code
        const greet = (user: objwithName) => {
                return user
        }
- Function Signature: general parameters of the function like arguments and what it returns like:
        let calcFunctionSignature: (a:number, b:number, c:string) => number;
        other way, found in comments
        type calc = (a:number, b:number, c:string) => number;
- Variable in strings using `${user.name} says ${user.greeting}`
- To verify for ts that element has a non null value put ! mark in front of DOM values like:
        const anchor = document.querySelector('a');
        and if we do
        console.log(anchor.href)
        we would get error of that this value might be null
        to remove this put ! at end
        const anchor = document.querySelector('a')!;
- This is how an eventListener is added:
        form.addEventListener("submit",(e:Event) => {
                e.preventDefault()
                console.log(
                        type.value,
                        tofrom.value,
                        details.value,
                        amount.valueAsNumber
                )
                })
- Classes: Used to create specific objects that are reused and have some functions attached with them as well
        class MyInvoice {
                client: string;
                payment: number;
                details: string;
                constructor (c: string, p: number, d: string){
                        this.client = c;
                        this.payment = p;
                        this.details = d;
                }
                format():void {
                        console.log(`${this.client} owes us ${this.payment} amount for ${this.details}`)
                }
        }

- Access Modifiers, used to define the class values which are added in the class, public, private, readonly. if we want to put the arguments of the class inside the constructor we need to define their types like private, public or readonly. like:
        class MyInvoice {
                constructor (readonly client: string,
                        private payment: number,
                        public details: string){
                }
                format():void {
                        console.log(`${this.client} owes us ${this.payment} amount for ${this.details}`)
                }
        }
- Better to craete different files for different works like DOM interactions, database interactions, auth interactions, use es6
- To use different folders and stuff change in tsconfig.json file as follows:
        "target": "ES6", 
        "module": "ES2015", 
        only modern browsers supported. 
        change index.html script tag and add type="module"
- Doesnt bundle our code, makes multiple calls, we can use webpacks to combat both these
- Interfaces: Enforce a certain structure to a class, objects. Specify functions, arguments. Can be implemented like this:
        interface MyPerson {
                name: string;
                age: number;
                speak(word: string): void;
                spend(amount: number): number;
        }

        const me:MyPerson = {
                name: "vaibhav",
                age: 21,
                speak(word: string): void {
                        console.log(word)
                },
                spend(amount: number): number {
                        console.log(amount);
                        return amount;
                },
        }
- Interfaces alongwith classes:
        use them like this:
        export class MyInvoice implements hasFormatter{CLASS CODE}
- Rendering an HTML template, to render the list of objects added in the invoices case, we can create a template for the list, in the constructor define all the elements that are present in the index.html file
        export class MylistTemplate {
                constructor(private container: HTMLUListElement){}

                render(doc: hasFormatter, heading: string, pos?: 'start' | 'end') {
                        let li = document.createElement('li');
                        let h4 = document.createElement('h4');
                        let p = document.createElement('p');
                        h4.innerText = heading;
                        p.innerText = doc.format();
                        li.append(h4)
                        li.append(p)
                        
                        if (pos === "start") {
                        this.container.prepend(li);
                        }
                        else{
                        this.container.append(li);
                        }
                }
        }
- Generics allow us to create reusalbe block of codes that can be used with different types.
        const addUID = <T extends {name: string}>(obj: T) => {
                const uid = Math.floor(Math.random() * 100);
                return {...obj, uid};
        }
        const newerObj = addUID(newObj);
        if we try to access newerObj older values, error happens
        to combat this we can add <T> and pass obj as T, what this does is, whatever older info and type was passed is now retained
        now we can also add uid to strings, to combat this we can extend T to objects, like <T extends object>
        we can use {name: string} instead of objects to even define it more other than just objects, but this only checks for 
        name key, there might be other keys in the object and theri wont be any issue
- Interfaces with generics
        interface myresource<T> {
                uid: number,
                reference: string,
                data: T
        }
        const intGenericObj: myresource<string[]> = {
                uid: 23,
                reference: "asd",
                data: ["asdd"]
        }
- Enums, stores string values to a specific index number that can be used to easily write code and use further:
        enum MyResourceType {COAL, COKE, SINTER, KILN}

        interface resourceobj<T> {
                uid: number,
                rstype: MyResourceType,
                data: T
        }
        let rsdoc1:resourceobj<String> = {
                uid: 12,
                rstype: MyResourceType.COAL,
                data:"hello"
        }
- ... is the spread operator
- Tuples: 
        const newArr = ["abc", 23, true]
        newArr[0] = 22
        allowed, but we dont want to 
        const newArr2:[string, number, boolean] = ["abc", 23, true]
        type tupleType = [string, number, boolean];
        let newTupleArr: tupleType[] = [];
        newTupleArr.push(newArr2);
        different from arrays such that we can fix the position of the type of the value that are entered in 
        the tuple and it cannot be anything else other than that type